#ifndef CMD_H
#define CMD_H

#include <stdint.h>

// JRD-100 RFID komut seti tablosu (hazır tanımlı komutlar)
class CMD {
public:
    static const uint8_t RFID_cmdnub[][26];
};

// Tekli okuma komutu
static const uint8_t CMD_SINGLE_READ[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};

// Çoklu okuma komutu
static const uint8_t CMD_MULTI_READ[] = {0xBB, 0x00, 0x27, 0x00, 0x03, 0x22, 0x27, 0x10, 0x83, 0x7E};

// Yazma komutu (örnek, kendi parametrelerine göre değiştirilebilir)
static const uint8_t CMD_WRITE_TAG[] = {
    0xBB, 0x00, 0x49, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x04, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x71, 0x7E
};



const uint8_t CMD::RFID_cmdnub[][26] = {
    {0xBB, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x7E},       // 0. Hardware version
    {0xBB, 0x00, 0x03, 0x00, 0x01, 0x01, 0x05, 0x7E},       // 1. Software version
    {0xBB, 0x00, 0x03, 0x00, 0x01, 0x02, 0x06, 0x7E},       // 2. Manufacturer
    {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E},             // 3. Single polling
    {0xBB, 0x00, 0x27, 0x00, 0x03, 0x22, 0x27, 0x10, 0x83, 0x7E}, // 4. Multiple polling
    {0xBB, 0x00, 0x28, 0x00, 0x00, 0x28, 0x7E},             // 5. Stop multiple polling
    {0xBB, 0x00, 0x0C, 0x00, 0x13, 0x01, 0x00, 0x00, 0x00, 0x20,
     0x60, 0x00, 0x30, 0x75, 0x1F, 0xEB, 0x70, 0x5C, 0x59, 0x04,
     0xE3, 0xD5, 0x0D, 0x70, 0xAD, 0x7E},                   // 6. Set SELECT parameter
    {0xBB, 0x00, 0x0B, 0x00, 0x00, 0x0B, 0x7E},             // 7. Get SELECT parameter
    {0xBB, 0x00, 0x12, 0x00, 0x01, 0x01, 0x14, 0x7E},       // 8. Set SELECT mode
    {0xBB, 0x00, 0x39, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x03,
     0x00, 0x00, 0x00, 0x08, 0x4D, 0x7E},                   // 9. Read label data
    {0xBB, 0x00, 0x49, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x03,
     0x00, 0x00, 0x00, 0x04, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
     0x22, 0x22, 0x71, 0x7E},                               // 10. Write label
    {0xBB, 0x00, 0x82, 0x00, 0x07, 0x00, 0x00, 0xFF,
     0xFF, 0x02, 0x00, 0x80, 0x09, 0x7E},                   // 11. Lock label
    {0xBB, 0x00, 0x65, 0x00, 0x04, 0x00, 0x00, 0xFF,
     0xFF, 0x67, 0x7E},                                     // 12. Inactivate kill tag
    {0xBB, 0x00, 0x11, 0x00, 0x02, 0x00, 0xC0, 0xD3, 0x7E}, // 13. Set baudrate
    {0xBB, 0x00, 0x0D, 0x00, 0x00, 0x0D, 0x7E},             // 14. Get Query parameters
    {0xBB, 0x00, 0x0E, 0x00, 0x02, 0x10, 0x20, 0x40, 0x7E}, // 15. Set Query parameter
    {0xBB, 0x00, 0x07, 0x00, 0x01, 0x01, 0x09, 0x7E},       // 16. Set work area
    {0xBB, 0x00, 0x08, 0x00, 0x00, 0x08, 0x7E},             // 17. Acquire work locations
    {0xBB, 0x00, 0xAB, 0x00, 0x01, 0x01, 0xAC, 0x7E},       // 18. Set working channel
    {0xBB, 0x00, 0xAA, 0x00, 0x00, 0xAA, 0x7E},             // 19. Get working channel
    {0xBB, 0x00, 0xAD, 0x00, 0x01, 0xFF, 0xAD, 0x7E},       // 20. Auto frequency hopping
    {0xBB, 0x00, 0xA9, 0x00, 0x06, 0x05, 0x01, 0x02,
     0x03, 0x04, 0x05, 0xC3, 0x7E},                         // 21. Insert working channel
    {0xBB, 0x00, 0xB7, 0x00, 0x00, 0xB7, 0x7E},             // 22. Acquire TX power
    {0xBB, 0x00, 0xB6, 0x00, 0x02, 0x07, 0xD0, 0x8F, 0x7E}, // 23. Set TX power
    {0xBB, 0x00, 0xB0, 0x00, 0x01, 0xFF, 0xB0, 0x7E},       // 24. TX continuous carrier
    {0xBB, 0x00, 0xF1, 0x00, 0x00, 0xF1, 0x7E},             // 25. RX demodulator params
    {0xBB, 0x00, 0xF0, 0x00, 0x04, 0x03, 0x06, 0x01,
     0xB0, 0xAE, 0x7E},                                     // 26. Set RX demodulator
    {0xBB, 0x00, 0xF2, 0x00, 0x00, 0xF2, 0x7E},             // 27. Test RF input
    {0xBB, 0x00, 0xF3, 0x00, 0x00, 0xF3, 0x7E},             // 28. Test RSSI
    {0x00},                                                 // 29. Empty
    {0xBB, 0x00, 0x17, 0x00, 0x00, 0x17, 0x7E},             // 30. Module hibernation
    {0xBB, 0x00, 0x1D, 0x00, 0x01, 0x02, 0x20, 0x7E},       // 31. Idle hibernation
    {0xBB, 0x00, 0x04, 0x00, 0x03, 0x01, 0x01, 0x03, 0x0C, 0x7E}, // 32. IDLE mode
    {0xBB, 0x00, 0xE1, 0x00, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xE4, 0x7E}, // 33. ReadProtect
    {0xBB, 0x00, 0xE3, 0x00, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0xE7, 0x7E}, // 34. CHANGE EAS
    {0xBB, 0x00, 0xE4, 0x00, 0x00, 0xE4, 0x7E},             // 35. EAS_ALARM
    {0xBB, 0x00, 0xE0, 0x00, 0x06, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xE4, 0x7E}, // 36. Config-word
    {0xBB, 0x00, 0xE5, 0x00, 0x08, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x01, 0x40, 0x00, 0x2D, 0x7E}, // 37. Impinj Monza Qt
    {0xBB, 0x00, 0xD3, 0x00, 0x0B, 0x00, 0x00, 0xFF, 0xFF, 0x01, 0x03, 0x00, 0x00, 0x01, 0x07, 0x00, 0xE8, 0x7E} // 38. BlockPermalock
};

#endif // CMD_H
